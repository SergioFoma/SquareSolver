#ifndef H_SOLVER
#define H_SOLVER

#include <stdbool.h>

//-----------------------------------------------------------------------------------------------------
//!
//! @note Содержит коды для количества корней. Количество корней - код, соотвествующий этому количеству.
//! zeroRoot - нет корней.
//! twoRoot - два корня.
//! oneRoot - один корень.
//! alotRoot - много корней.
//! twoSameRoot - два совпадающих корня.
//!
//-----------------------------------------------------------------------------------------------------
enum RootsCount {

    zeroRoot    = 0,
    twoRoot     = 1,
    oneRoot     = 2,
    alotRoot    = 3,
    twoSameRoot = 4

};

//------------------------------------------------------------------------------
//!
//! @note Дельта окрестность для погрешности в сравнении переменных типов double.
//!
//-------------------------------------------------------------------------------
const double delta = 1e-5; 

//-----------------------------------------------------------------
//!
//! @note Структура, содержащая коэффициенты квадратного уравнения.
//! a - старшний коэффициент квадратного уравнения.
//! b - коэффициент перед неизвестной переменной.
//! c - свободный член.
//!
//------------------------------------------------------------------
struct Coefficients {

    double a;
    double b;
    double c;
};

//-----------------------------------------------------------------
//!
//! @note Струкура, содержащая корни уравнения и количество корней.
//! x1 - меньший корень уравнения.
//! x2 - больший корень уравнения.
//! countRoots  countRoots - количество корней типа перечисления.
//!
//------------------------------------------------------------------
struct SolveResult {

    double x1;
    double x2;

    RootsCount countRoots;
};

//------------------------------------------------------------------------------------------------------
//!
//! @param [in] coefficients    coefficients - структура, содержащая коэффициенты квадратного уравнения.
//! @param [in] *answer    *answer - указатель на структуру, содержащую решение квадратного уранения.
//!
//! @note   Вызывает либо решение линейного уравнения ( solveLinear ), либо квадратного (solveSquare ).
//! Записывает в струрктуру answer корни уравнения и их количество.
//!
//------------------------------------------------------------------------------------------------------
void solveEquation( Coefficients coefficients, SolveResult* answer );

//----------------------------------------------------------------------------------------------------
//!
//! @param [in] coefficients   coefficients - структура, содержащая коэффициенты квадратного уравнения.
//! @param [in] *answer    *answer - указатель на структуру, содержащую решение квадратного уранения.
//!
//! @note Решает квадратное уравнение, записывает в структуру answer корни уравнения и их количество.
//-----------------------------------------------------------------------------------------------------
void solveSquare( Coefficients coefficients, SolveResult* answer);

//-----------------------------------------------------------------------------------------------------
//!
//! @param [in] coefficients   coefficients - структура, содержащая коэффициенты квадратного уравнения.
//! @param [in] *answer    *answer - указатель на структуру, содержащую решение квадратного уранения.
//!
//! @note Решает квадратное уравнение, записывает в структуру answer корни уравнения и их количество.
//!
//------------------------------------------------------------------------------------------------------
void solveLinear( Coefficients coefficients, SolveResult* answer);

//-----------------------------------------------------------------------
//!
//! @param[in] firstNumber     firstNumber - первое число для сравнения.
//! @param[in] secondNumber    secondNumber - второе число для сравнения.
//!
//! @return tru если числа близки друг другу, false если отличны.
//!
//! @note Проверяет близость чисел.
//!
//------------------------------------------------------------------------    
bool isEqual( double firstNumber, double secondNumber );

#endif
