#ifndef H_SOLVER
#define H_SOLVER

//----------------------------------------------------------------------------------------------------
//!
//! @note Содержит коды для количства корней. Количество корней - код, соотвествующий этому количеству.
//!
//-----------------------------------------------------------------------------------------------------
enum RootsCount {

    zeroRoot = 0,
    twoRoot = 1,
    oneRoot = 2,
    alotRoot = 3,
    twoSameRoot = 4

};

//------------------------------------------------------------------------------
//!
//! @note Дельта окрестность для погрешность в сравнении переменных типов double.
//!
//-------------------------------------------------------------------------------
const double delta = 1e-5; 

//-----------------------------------------------------------------
//!
//! @note Структура, содеражащая коэффициенты квадратного уравнения.
//!
//------------------------------------------------------------------
struct Coefficients {

    double a;
    double b;
    double c;
};

//-----------------------------------------------------------------
//!
//! @note Струкура, содеражащая корни уравнения и количество корней.
//
//------------------------------------------------------------------
struct SolveResult {

    double x1;
    double x2;

    RootsCount countRoots;
};

//------------------------------------------------------------------------------------------------------
//!
//! @param [in] coefficients    coefficients - структура, содержащая коэффициенты квадратного уравнения.
//!
//! @result Структуру типа SolveResult, содержащую полученные корни и их количество.
//!
//! @note   Вызывает либо решение линейного уравнения ( solveLinear ), либо квадратного (solveSquare ).
//! Возращает структуру, в которую передаются корни ур - я и количество корней.
//!
//------------------------------------------------------------------------------------------------------
SolveResult solveEquation( Coefficients coefficients );

//----------------------------------------------------------------------------------------------------
//!
//! @param [in] coefficients   coefficients - структура, содержащая коэффициенты квадратного уравнения.
//! @param [in] *x1   *x1 - указатель на меньший корень уравнения.
//! @param [in] *x2   *x2 - указатель на больший корень уравнения.
//! @param [in] *countRoots    *countRoots- указатель на количество корней.
//!
//! @note Решает квадратное уравнение, записывает результат в x1, x2 и countRoots соответственно.
//-----------------------------------------------------------------------------------------------------
void solveSquare( Coefficients coefficients, double* x1, double* x2, RootsCount* countRoots );

//-----------------------------------------------------------------------------------------------------
//!
//! @param [in] coefficients   coefficients - структура, содержащая коэффициенты квадратного уравнения.
//! @param [in] *x1   *x1 - указатель на меньший корень уравнения.
//! @param [in] *x2   *x2 - указатель на больший корень уравнения.
//! @param [in] *countRoots    *countRoots- указатель на количество корней.
//!
//! @note Решает линейное уравнение, результат записывает в x1, x2 и countRoots соотвественно.
//!
//------------------------------------------------------------------------------------------------------
void solveLinear( Coefficients coefficients, double* x1, double* x2, RootsCount* countRoots );

#endif
